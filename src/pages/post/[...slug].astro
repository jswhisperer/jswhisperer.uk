---
import LinkUnderline from '@/components/LinkUnderline'
import ListRelatedPosts from '@/components/ListRelatedPosts'
import Code from '@/components/mdx/Code'
import SButton from '@/components/mdx/SButton'
import Share from '@/components/Share'
import TableOfContents from '@/components/TableOfContents'
import WebMention from '@/components/WebMentions'
import BlogPost from '@/layouts/BlogPost'
import { getPosts } from '@/utils'
import { Picture } from 'astro:assets'
const pageUrl = new URL(Astro.url.pathname, Astro.site)

import { type CollectionEntry, getCollection } from 'astro:content'

const posts = await getCollection('blog')
export async function getStaticPaths() {
	const posts = await getPosts()

	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post
	}))
}

const webmentionsUrl =
	'https://webmention.io/api/mentions.jf2?domain=jswhisperer.uk&token=S41J_UI23sPl4N4QtVtN8w'
const response = await fetch(webmentionsUrl)
const json = await response.json()
const webmentions = json.children.filter((mention: { [x: string]: URL[] }) =>
	mention['wm-target'].includes(pageUrl)
)

type Props = CollectionEntry<'blog'> & { blskyid: any; slug: string; author: any; name: any }

const post = Astro.props
const MAX_POSTS = 3
const getRelatedPosts = (post: Props) => {
	const lowercaseTags = post?.data?.tags?.map((tag) => tag.toLowerCase())
	const relatedPosts = posts.filter(
		(p) =>
			p.slug !== post.slug && p.data?.tags?.some((t) => lowercaseTags?.includes(t.toLowerCase()))
	)
	return relatedPosts.slice(0, MAX_POSTS)
}

const relatedPosts = getRelatedPosts(post)

const { Content, headings, remarkPluginFrontmatter } = await post.render()

import sanitizeHTML from 'sanitize-html'

function getWebmentionsForUrl(webmentions: any[], url: any) {
	console.log({ url })
	const allowedTypes = ['mention-of', 'in-reply-to']

	const hasRequiredFields = (entry: { author: any; published: any; content: any }) => {
		const { author, published, content } = entry
		return author.name && published && content
	}
	const sanitize = (entry: { content: any }) => {
		const { content } = entry
		if (content['content-type'] === 'text/html') {
			content.value = sanitizeHTML(content.value)
		}
		return entry
	}

	return webmentions
		.filter((entry: { [x: string]: any }) => entry['wm-target'] === url)
		.filter((entry: { [x: string]: string }) => allowedTypes.includes(entry['wm-property']))
		.filter(hasRequiredFields)
		.map(sanitize)
}
---

<BlogPost
	id={post.id}
	slug={post.slug}
	data={post.data}
	blskyid={post?.data?.blskyid}
	headings={headings}
	readTime={remarkPluginFrontmatter.minutesRead}
	author={post.author}
>
	<div class='grid grid-cols-1 md:grid-cols-[20%_auto] gap-10 mt-8'>
		<!-- aside  -->
		<aside class='md:flex flex-col gap-8 hidden'>
			<Share />
			<div class='sticky top-24 self-start hidden md:block transition-all duration-200'>
				{headings && headings.length > 0 && <TableOfContents {headings} />}
			</div>
		</aside>

		<!-- post -->
		<article class='h-card card max-w-full w-full'>
			<span class='main-content-shadow'></span>
			<div
				class='e-content prose prose-lg md:prose-xl dark:prose-invert mb-12 min-w-full'
				itemprop='articleBody'
			>
				<LinkUnderline class='u-url' href=`https://jswhisperer.uk/post/${post.slug}`>
					permalink
				</LinkUnderline>

				<Content components={{ Code, SButton, Picture }} />

				<form action='https://indieauth.com/auth' method='get'>
					<label for='indie_auth_url'>Web Address:</label>
					<input
						id='indie_auth_url'
						type='text'
						name='me'
						placeholder='yourdomain.com'
						autocomplete='true'
					/>
					<p><button type='submit'>Sign In</button></p>
					<input type='hidden' name='client_id' value='https://jswhisperer.uk/' />
					<input
						type='hidden'
						name='redirect_uri'
						value=`https://jswhisperer.uk/post/${post.slug}/`
					/>
				</form>

				<!-- related posts -->
				<footer>
					<h2 class='font-bold text-lg dark:text-white mb-6'>Related Posts</h2>
					<ListRelatedPosts posts={relatedPosts} />
					<WebMention webmentions={webmentions} />
				</footer>
			</div>
		</article>
	</div>
</BlogPost>

<script>
	const urlParams = new URLSearchParams(window.location.search)
	const code = urlParams.get('code')
	let loggedIn
	const checkCode = async (code: string) => {
		console.log({
			code,
			redirect_uri: `${document.URL.split('/')[0]}//${document.URL.split('/')[2]}/${document.URL.split('/')[3]}/${document.URL.split('/')[4]}/`,
			client_id: `${document.URL.split('/')[0]}//${document.URL.split('/')[2]}/`
		})
		loggedIn = await fetch('https://indieauth.com/auth', {
			method: 'POST',
			headers: new Headers({
				'Content-Type': 'application/x-www-form-urlencoded'
			}),
			body: new URLSearchParams({
				code,
				redirect_uri: `${document.URL.split('/')[0]}//${document.URL.split('/')[2]}/${document.URL.split('/')[3]}/${document.URL.split('/')[4]}/`,
				client_id: `${document.URL.split('/')[0]}//${document.URL.split('/')[2]}/`
			}),
			redirect: 'follow'
		})
			.then((response) => response.status)
			.then((result) => console.log({ result }))
			.catch((error) => console.error({ error }))
	}
	if (code) {
		await checkCode(code)
		console.log({ loggedIn })
		//console.log(loggedIn)
	}
</script>
