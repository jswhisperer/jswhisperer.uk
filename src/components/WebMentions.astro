---
import { Image } from 'astro:assets'

import sanitizeHTML from 'sanitize-html'
const sanitize = (entry: { content: any }) => {
	const { content } = entry
	//if (content['content-type'] === 'text/html') {
	content.value = sanitizeHTML(content.value)
	//}
	return entry
}

interface AuthorProps {
	name: string
	photo: string
	url: string
}

interface WebmentionProps {
	author: AuthorProps
	'wm-received': string
	'wm-property': string
	content: any
}

interface Props {
	webmentions: WebmentionProps[]
}

const { webmentions } = Astro.props

const showDate = (webmention: string) =>
	new Date(webmention).toLocaleDateString(undefined, {
		day: 'numeric',
		month: 'long',
		year: 'numeric'
	})
---

{
	webmentions.length ? (
		<section aria-label='Webmentions'>
			<h2>Webmentions</h2>
			<div id='upvote-form' />
			<ul>
				{webmentions.map((webmention: WebmentionProps) => (
					<li>
						<div class='avatar-and-author '>
							<a href={webmention.author.url} rel='author' aria-label='author url'>
								{webmention.author.photo ? (
									<Image
										alt={webmention.author.name}
										title={webmention.author.name}
										class='avatar'
										height='50'
										src={webmention.author.photo}
										width='50'
									/>
								) : null}
							</a>
						</div>
						<div class='information'>
							{webmention['wm-property'] === 'like-of' && (
								<p class='flex'>
									Liked on:
									<time aria-hidden='true' datetime={webmention['wm-received']}>
										{showDate(webmention['wm-received'])}
									</time>
								</p>
							)}

							{webmention['wm-property'] === 'in-reply-to' && (
								<div class='flex'>
									<p>replied: </p>
									<blockquote set:html={sanitizeHTML(webmention['content']['text'])} />
								</div>
							)}

							{webmention['wm-property'] === 'repost-of' ? (
								<p>
									Reposted on
									<time aria-hidden='true' datetime={webmention['wm-received']}>
										{showDate(webmention['wm-received'])}
									</time>
								</p>
							) : null}
						</div>
					</li>
				))}
			</ul>
		</section>
	) : null
}
<style>
	.avatar {
		border-radius: 50%;
		overflow: hidden;
	}
</style>

<script>
	if (document.querySelector('body')) {
		function setContent(child: { [x: string]: any; content: { text: any } }) {
			switch (child['wm-property']) {
				case 'in-reply-to':
					return child.content?.text
				case 'like-of':
					return 'liked this'
				case 'repost-of':
					return 'reposted this'
				default:
					return 'interacted with this post in an unknown way'
			}
		}

		async function fetchInteractions(headerTitle: string | null) {
			const response = await fetch('https://webmention.io/api/mentions.jf2?target=' + document.URL) //document.URL)

			const data = await response.json()
			if (data && data.children.length > 0) {
				const interactions = document.createElement('div')
				interactions.innerHTML = `<h3>${headerTitle ?? 'Interactions'}</h3>`

				for (const child of data.children) {
					const interaction = document.createElement('div')

					interaction.innerHTML = `
              <p>
                  <strong>
                    <a href="${child.author.url}" target="_blank">
                      <img class='avatar' width="50" height="50" src="${child.author.photo}" title="${child.author.name}" />
                      </a></strong>
                  <small> - <time aria-hidden='true' datetime={webmention['wm-received']}>${new Date(
										child['wm-received']
									).toLocaleString('en-US', {
										month: 'short',
										day: 'numeric',
										year: 'numeric'
									})}</time></small>
              </p>
              <blockquote>${setContent(child)}</blockquote>
          `

					interactions.appendChild(interaction)
				}

				const upvoteForm = document.getElementById('upvote-form')
				if (upvoteForm && upvoteForm.parentNode) {
					upvoteForm.parentNode.insertBefore(interactions, upvoteForm.nextSibling)
				}
			}
		}

		await fetchInteractions('Webmentions')
	}
</script>
