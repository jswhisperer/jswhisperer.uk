---
import { Image, Picture } from 'astro:assets'

import authorphoto from '@/assets/images/greg.jpeg'
import sanitizeHTML from 'sanitize-html'

const theUrl = Astro.url

const sanitize = (entry: { content: any }) => {
	const { content } = entry
	//if (content['content-type'] === 'text/html') {
	content.value = sanitizeHTML(content.value)
	//}
	return entry
}

interface AuthorProps {
	name: string
	photo: string
	url: string
}

interface WebmentionProps {
	author: AuthorProps
	'wm-received': string
	'wm-property': string
	content: any
}

interface Props {
	webmentions: WebmentionProps[]
}

const { webmentions } = Astro.props

const showDate = (webmention: string) =>
	new Date(webmention).toLocaleDateString(undefined, {
		day: 'numeric',
		month: 'long',
		year: 'numeric'
	})
---

{
	webmentions.length ? (
		<>
			{/* <span itemprop='commentCount'>{webmentions.length}</span> */}
			<section
				aria-label='Webmentions'
				itemtype='https://schema.org/DiscussionForumPosting'
				itemscope
			>
				<div
					itemprop='agentInteractionStatistic'
					itemtype='https://schema.org/InteractionCounter'
					itemscope
				>
					<span itemprop='userInteractionCount'>{webmentions.length}</span>{' '}
					<span itemprop='interactionType' content='https://schema.org/LikeAction'>
						likes
					</span>
				</div>
				<meta itemprop='mainEntityOfPage' content={theUrl} />
				<meta itemprop='url' content={theUrl} />
				<time itemprop='datePublished' datetime='2025-01-24T10:15:16Z' data-astro-cid-qesbhxo5>
					January 24, 2025
				</time>
				<h2 id='webmentions'>Webmentions</h2>
				<span itemprop='text'>lorem ipsum</span>
				<div
					itemprop='author'
					itemscope
					itemtype='https://schema.org/Person'
					class='avatar-and-author author u-author h-card'
				>
					<div itemprop='name'>greg</div>
					<a itemprop='url' href='https://jswhisperer.uk/author/greg' aria-label='author url'>
						{/* {webmention?.author?.photo && (
										<Picture
											alt={webmention.author.name}
											width={authorphoto.width}
											height={authorphoto.height}
											src={authorphoto.src}
											fit='cover'
										/>
									)} */}
					</a>
				</div>
				<ul>
					{webmentions.map((webmention: WebmentionProps) => (
						<li style='align-items: center;' itemscope itemtype='http://schema.org/Comment'>
							<small>
								<time
									itemprop='datePublished'
									content={webmention['wm-received']}
									datetime={webmention['wm-received']}
								>
									{showDate(webmention['wm-received'])}
								</time>
							</small>
							<div
								itemprop='author'
								itemscope
								itemtype='https://schema.org/Person'
								class='avatar-and-author author u-author h-card'
							>
								<div itemprop='name'>{webmention.author.name || 'greg'}</div>
								<a
									itemprop='url'
									href={webmention.author.url || 'https://jswhisperer.uk/author/greg'}
									aria-label='author url'
								>
									{webmention?.author?.photo && (
										<Picture
											alt={webmention.author.name}
											width={authorphoto.width}
											height={authorphoto.height}
											src={authorphoto.src}
											fit='cover'
										/>
									)}
								</a>
							</div>
							<div class='information'>
								{/* {webmention['wm-property']} */}
								{webmention['wm-property'] === 'like-of' && (
									<div class='flexx' itemprop='text'>
										Liked on:
										<time datetime={webmention['wm-received']}>
											{showDate(webmention['wm-received'])}
										</time>
									</div>
								)}
								{webmention['wm-property'] === 'in-reply-to' ? (
									<div class='flexx r' style='align-items: center;'>
										<p>
											replied on:{' '}
											<time datetime={webmention['wm-received']}>
												{showDate(webmention['wm-received'])}
											</time>
										</p>
										<blockquote
											itemprop='text'
											set:html={sanitizeHTML(webmention['content']['text'])}
										/>
									</div>
								) : null}
								{webmention['wm-property'] === 'repost-of' ? (
									<p itemprop='text'>
										Reposted on{' '}
										<time datetime={webmention['wm-received']}>
											{showDate(webmention['wm-received'])}
										</time>
									</p>
								) : null}
								{webmention['wm-property'] === 'mention-of' ? (
									<p itemprop='text'>
										mentioned on{' '}
										<time datetime={webmention['wm-received']}>
											{showDate(webmention['wm-received'])}
										</time>
									</p>
								) : null}
							</div>
						</li>
					))}
				</ul>
			</section>
		</>
	) : null
}
<style>
	.avatar {
		width: 50px;

		height: 50px;
		border-radius: 50%;
		overflow: hidden;
	}
</style>

<script>
	// if (document.querySelector('body')) {
	// 	function setContent(child: { [x: string]: any; content: { text: any } }) {
	// 		switch (child['wm-property']) {
	// 			case 'in-reply-to':
	// 				return child.content?.text
	// 			case 'like-of':
	// 				return 'liked this'
	// 			case 'repost-of':
	// 				return 'reposted this'
	// 			default:
	// 				return 'interacted with this post in an unknown way'
	// 		}
	// 	}

	// async function fetchInteractions(headerTitle: string | null) {
	// 	const response = await fetch('https://webmention.io/api/mentions.jf2?target=' + document.URL) //document.URL)

	// 	const data = await response.json()
	// 	if (data && data.children.length > 0) {
	// 		const interactions = document.createElement('div')
	// 		interactions.innerHTML = `<h3>${headerTitle ?? 'Interactions'}</h3>`

	// 		for (const child of data.children) {
	// 			const interaction = document.createElement('div')

	// 			interaction.innerHTML = `
	//           <p>
	//               <strong>
	//                 <a href="${child.author.url || 'https://jswhisperer.uk/author/greg'}" itemprop="url" target="_blank">
	//                   <img class='avatar' width="50" height="50" src="${child.author.photo}" title="${child.author.name}" />
	//                   </a></strong>
	//                   <span itemprop="name">${child.author.name || 'greg'}</span>
	//               <small> - <time aria-hidden='true' datetime={webmention['wm-received']}>${new Date(
	// 								child['wm-received']
	// 							).toLocaleString('en-US', {
	// 								month: 'short',
	// 								day: 'numeric',
	// 								year: 'numeric'
	// 							})}</time></small>
	//           </p>
	//           <blockquote>${setContent(child)}</blockquote>
	//       `

	// 			interactions.appendChild(interaction)
	// 		}

	// 		const upvoteForm = document.getElementById('upvote-form')
	// 		if (upvoteForm && upvoteForm.parentNode) {
	// 			upvoteForm.parentNode.insertBefore(interactions, upvoteForm.nextSibling)
	// 		}
	// 	}
	// }

	//	await fetchInteractions('Webmentions')
	//}
</script>
