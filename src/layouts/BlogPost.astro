---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '@/components/FormattedDate'
import BaseLayout from '@/layouts/BaseLayout'
import Tag from '@/components/Tag'
import type { MarkdownHeading } from 'astro'
import { Picture } from 'astro:assets'
import { siteConfig } from '../data/site.config'
import { getCollection } from 'astro:content'
import Webmention from '@/components/WebMention'
const pageUrl = new URL(Astro.url.pathname, Astro.site)

const webmentionsUrl =
	'https://webmention.io/api/mentions.jf2?domain=jswhisperer.uk&token=S41J_UI23sPl4N4QtVtN8w'
const response = await fetch(webmentionsUrl)
const json = await response.json()
const webmentions = json.children.filter(({ url }) => url.includes(pageUrl))

console.log({ webmentions })

const username = 'jswhisperer'

type Props = {
	id: CollectionEntry<'blog'>['id']
	data: CollectionEntry<'blog'>['data']
	author: CollectionEntry<'author'>['data']
	headings: MarkdownHeading[]
	readTime: string
	slug: string
	author: any
}

const { data, readTime, headings, id, slug } = Astro.props
const { title, description, pubDate, heroImage, tags, author, category } = data
const authors = await getCollection('author')

const currentAuthor = authors.find((a) => a.name === author?.name)

const articleDate = pubDate.toISOString()
---

<script
	type='application/ld+json'
	set:html={JSON.stringify({
		'@context': 'https://schema.org',
		'@type': 'Article',
		headline: title,
		keywords: tags,
		description,
		datePublished: pubDate.toISOString(),
		dateModified: pubDate?.toISOString() ?? undefined,
		url: pageUrl, //`${siteConfig.site}post/${slug}`,
		thumbnailUrl: heroImage || '/public/open-graph.png',
		image: {
			'@type': 'ImageObject',
			url: heroImage?.src,
			width: heroImage?.width,
			height: heroImage?.height
			// caption: heroImage.alt
		},
		author: {
			'@type': 'Person',
			name: currentAuthor?.name,
			description: currentAuthor?.bio,
			url: `${Astro.site}/author/${currentAuthor?.slug}`
		}
	})}
/>

<BaseLayout
	title={title}
	description={description}
	image={heroImage || '/public/open-graph.png'}
	articleDate={articleDate}
>
	<article class='h-entry min-w-full md:py-4 sm:max-w-none md:max-w-none'>
		<header class='mb-3 flex flex-col justify-center items-center gap-6'>
			<a class='u-url u-uid' href={pageUrl} style='display:none;'></a>

			<div class='flex flex-col gap-2'>
				<div class='flex items-center justify-center gap-x-1'>
					<h1 class='p-name text-center text-4xl md:text-6xl md:pb-2.5 font-semibold'>
						{title}
					</h1>
					<div class='h-card'>
						<div class='text-center text-sm text-opacity-50'>
							Published <FormattedDate date={pubDate} />
						</div> by <p>
							Published by <a class='p-author' rel='author' href={currentAuthor.url}
								>{currentAuthor.slug}</a
							>
							{
								[
									`https://github.com/${username}`,
									`https://www.linkedin.com/in/${username}`,
									`https://bsky.app/profile/${username}.bsky.social`,
									`https://www.linkedin.com/in/${username}`,
									`https://dev.to/${username}`,
									`mailto:hello@${username}`,
									`https://x.com/${username}`
								].map((social) => <a rel='me' href={social} class='u-url' style='display:none;' />)
							}
							<img
								class='u-photo'
								src='https://jswhisperer.uk/greg.jpeg'
								alt='Gregory Benner'
								style='display:none;'
							/>
							<p class='text-center text-sm text-opacity-50 font-bold'>
								- {readTime}
							</p>
						</p>
					</div>
				</div>

				<div class='flex flex-wrap justify-center items-center gap-2 gap-y-4 md:gap-5'>
					{tags?.map((tag) => <Tag tag={tag} />)}
				</div>
			</div>

			<>
				{
					heroImage && (
						<Picture
							src={heroImage}
							width={1000}
							height={500}
							class='rounded-md w-full max-h-[300px] border-4 md:border-t-4  md:max-h-[500px] my-8 object-cover border-white-900'
							alt={`img of ${title}`}
							decoding='async'
							loading='lazy'
							formats={['avif', 'webp']}
						/>
					)
				}
			</>

			<hr />

			<div>
				<slot />
				<Webmention webmentions={webmentions} />
			</div>
		</header>
	</article>

	<script>
		import { Image, Picture } from 'astro:assets'

		const fnObserver = () => {
			function handleIntersection(
				entries: IntersectionObserverEntry[],
				observer: IntersectionObserver
			) {
				entries.forEach((entry) => {
					const index = document.querySelector(`aside a[href="#${entry.target.id}"]`)

					if (entry.isIntersecting) {
						index?.classList.remove('bg-slate-200', 'dark:bg-slate-800') // remove bg
						index?.classList.add(
							'bg-indigo-600',
							'dark:bg-indigo-700',
							'text-white',
							'font-bold',
							'transition-colors',
							'duration-200'
						)
					} else {
						index?.classList.add('bg-slate-200', 'dark:bg-slate-800') // add bg
						index?.classList.remove(
							'bg-indigo-600',
							'dark:bg-indigo-700',
							'text-white',
							'font-bold',
							'transition-colors',
							'duration-200'
						)
					}
				})
			}

			const headings = document.querySelectorAll(
				'div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6'
			)

			const options = {
				root: null,
				rootMargin: ' 15% 0px 0% 0px ',
				threshold: 1
			}

			const observer = new IntersectionObserver(handleIntersection, options)

			headings.forEach((heading) => {
				observer.observe(heading)
			})
		}
		fnObserver()
		document.addEventListener('astro:after-swap', fnObserver)
	</script>
</BaseLayout>
